// class Solution {
//     public int uniquePaths(int m, int n) {
        
//     }
// }

public class Solution {
public int uniquePaths(int m, int n) {
    int[][] grid = new int[m][n];
    for(int i = 0; i<m; i++){
        for(int j = 0; j<n; j++){
            if(i==0||j==0)
                grid[i][j] = 1;
            else
                grid[i][j] = grid[i][j-1] + grid[i-1][j];
        }
    }
    return grid[m-1][n-1];
}
}

// public int uniquePaths(int m, int n) {
//   if (m == 0 || n == 0) {
//     throw new IllegalArgumentException("m or n can't be 0");
//   }
//   int[] dp = new int[n]; // row
//   // init
//   for (int i = 0; i < n; ++i) dp[i] = 1;
//   // dp
//   for (int i = 1; i < m; ++i) {
//     for (int j = 1; j < n; ++j) {
//       dp[j] = dp[j] + dp[j - 1];
//     }
//   }
//   return dp[n - 1];
// }
